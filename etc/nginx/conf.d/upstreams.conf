
#
# dummy_servers
#

# authrouter
upstream authrouter {
    zone authrouter 64k;
    server localhost:8096;
    server localhost:8097;
    server localhost:8098;
    server localhost:8099;

    # Load Balancing
    # Round Robin - Default
    # ip_hash;
    # hash [key] [consistent];
    # least_conn;
    # least_time header last_byte [inflight];
	# random [two [method]];

    # Activates the cache for connections to upstream servers
    keepalive 64;

}

# ERROR
upstream error {
    zone error 64k;
    server localhost:9004;

    # Activates the cache for connections to upstream servers
    keepalive 64;

}

# OT30
upstream OT30 {
    zone OT30 64k;
    server localhost:9001;

    # Activates the cache for connections to upstream servers
    keepalive 64;

}

# OT31
upstream OT31 {
    zone OT31 64k;
    server localhost:9002;
    
    # Activates the cache for connections to upstream servers
    keepalive 64;

}

# X
upstream x {
    zone x 64k;
    server localhost:9003;
    
    # Activates the cache for connections to upstream servers
    keepalive 64;

}

##################
# Load Balancing #
##################

#
# - Round Robin (the default)
#   Distributes requests in order across the list of upstream servers.
#
# - Least Connections
#   Sends requests to the server with the lowest number of
#   active connections.
#   e.g.
#   least_conn;
#
# - Least Time
#   Exclusive to NGINX Plus. Sends requests to the server selected by a
#   formula that combines the fastest response time and fewest active
#   connections: `least_time header | last_byte [inflight];`
#   e.g.
#   least_time last_byte;
#
#  - Hash
#    Distributes requests based on a key you define, such as the client IP
#    address or the request URL. NGINX Plus can optionally apply a consistent
#    hash to minimize redistribution of loads if the set of upstream servers
#    changes: `hash key [consistent];`
#    e.g.
#    hash $request_uri consistent;
#
#  - IP Hash (HTTP only)
#    Distributes requests based on the first three octets of
#    the client IP address.
#    e.g.
#    ip_hash;
#
#  - Random with Two Choices
#    Picks two servers at random and sends the request to the one that is
#    selected by then applying the Least Connections algorithm (or for NGINX Plus
#    the Least Time algorithm, if so configured): `random [two [method]]`
#    e.g.
#    random two; # Round Robin
#    random two least_conn; # Least connections
#    random two least_time=last_byte; # Least time: use header or last_byte
